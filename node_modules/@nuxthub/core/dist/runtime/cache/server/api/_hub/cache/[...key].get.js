import ms from "ms";
import { eventHandler, getRouterParam } from "h3";
import { requireNuxtHubAuthorization } from "../../../../../utils/auth.js";
import { requireNuxtHubFeature } from "../../../../../utils/features.js";
import { useStorage } from "#imports";
export default eventHandler(async (event) => {
  await requireNuxtHubAuthorization(event);
  requireNuxtHubFeature("cache");
  const key = getRouterParam(event, "key") || "";
  if (/\.[a-z0-9]{2,5}$/i.test(key)) {
    const item = await useStorage("cache").getItem(key);
    if (item) {
      return item;
    }
  }
  const storage = useStorage(`cache:${key}`);
  const keys = await storage.getKeys();
  const stats = {
    groups: {},
    cache: []
  };
  await Promise.all(keys.map(async (key2) => {
    if (key2.includes(":")) {
      const k = key2.split(":")[0];
      stats.groups[k] = (stats.groups[k] || 0) + 1;
      return;
    }
    const item = await storage.getItem(key2);
    if (!item) return;
    const { value, ...meta } = item;
    const entry = {
      key: key2,
      ...meta,
      size: JSON.stringify(item).length
    };
    try {
      entry.duration = ms(meta.expires - meta.mtime, { long: true });
    } catch (err) {
      entry.duration = "unknown";
    }
    stats.cache.push(entry);
  }));
  return stats;
});
